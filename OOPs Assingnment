{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "52371dee-f4ca-47af-bd37-c413efc51c69",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "44ae0fff-e05f-4678-8f59-e66a5ca51b47",
   "metadata": {},
   "outputs": [],
   "source": [
    "class vehicle:\n",
    "\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "        \n",
    "    def color_vehicle(self,color):\n",
    "        return f\"The color of {self.name_of_vehicle} is {color}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9ced802a-368a-40a7-8276-fe6124b9bd98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The color of Car is blue\n"
     ]
    }
   ],
   "source": [
    "my_vehicle = vehicle(\"Car\", 200, 50)\n",
    "\n",
    "print(my_vehicle.color_vehicle(\"blue\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c3dcc240-dd6a-4ccb-a848-a9b110871da3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6d642b72-9c27-4009-b574-b39db857d068",
   "metadata": {},
   "outputs": [],
   "source": [
    "class vehicle:\n",
    "    def __init__(self, name_of_vehicle, max_speed , average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_vehicle = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "class Car(vehicle):\n",
    "    def __init__(self, name_of_vehicle, max_speed , average_of_vehicle):\n",
    "        vehicle.__init__(self, name_of_vehicle, max_speed , average_of_vehicle)\n",
    "        \n",
    "    def seating_capacity(self, capacity):\n",
    "        return f\"The {self.name_of_vehicle} has a seating capacity of {capacity} passanger \"\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "78dccdad-63fc-4964-9687-d186d7fd2867",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Sedan has a seating capacity of 5 passanger \n"
     ]
    }
   ],
   "source": [
    "my_car = Car(\"Sedan\", 180, 30)\n",
    "print(my_car.seating_capacity(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6b923ce7-a3cc-49ea-97cd-fdede1fbaf88",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "474f29d5-d7af-44a2-950f-5eaa165d4f87",
   "metadata": {},
   "source": [
    "Multiple inheritance is a feature in object-oriented programming where a class can inherit attributes and methods from multiple parent classes. In Python, a class can inherit from more than one base class, allowing it to combine the properties and behaviors of all the parent classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6de7e1d9-5407-4857-b51e-9d21b00e6cf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bat can fly.\n",
      "Bat can run.\n"
     ]
    }
   ],
   "source": [
    "class Bird:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "\n",
    "    def fly(self):\n",
    "        return f\"{self.name} can fly.\"\n",
    "\n",
    "class Mammal:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "\n",
    "    def run(self):\n",
    "        return f\"{self.name} can run.\"\n",
    "\n",
    "class Bat(Bird, Mammal):\n",
    "    def __init__(self, name):\n",
    "        Bird.__init__(self, name)\n",
    "        Mammal.__init__(self, name)\n",
    "\n",
    "bat_instance = Bat(\"Bat\")\n",
    "print(bat_instance.fly())   \n",
    "print(bat_instance.run())  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "efc5f6fc-7455-4210-9ced-e4ab2dfca30a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33322936-1257-49eb-9a87-8e5a1ed65a1f",
   "metadata": {},
   "source": [
    "In Python, getters and setters are methods that provide a way to access and modify the attributes (or properties) of a class. They are used to encapsulate the attributes and control their access, allowing you to perform additional actions, such as validation or computation, before getting or setting the values.\n",
    "\n",
    "Getter Method: A getter method is used to retrieve the value of an attribute (property) of a class. It typically has the naming convention get_property, where property is the name of the attribute you want to retrieve.\n",
    "\n",
    "Setter Method: A setter method is used to set the value of an attribute (property) of a class. It typically has the naming convention set_property, where property is the name of the attribute you want to set."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90efd030-66d4-460d-a250-1c4df7222a4e",
   "metadata": {},
   "source": [
    "class Person:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self._age = age  \n",
    "\n",
    "person = Person(\"John\", 30)\n",
    "\n",
    "print(person.get_age()) \n",
    "\n",
    "person.set_age(35)\n",
    "print(person.get_age())  \n",
    "\n",
    "try:\n",
    "    person.set_age(-5)\n",
    "except ValueError as e:\n",
    "    print(e)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2ad020fc-e180-46a2-a8d7-b619d81ba24f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b547e2ca-39c7-404c-bebd-367dc8ab6b67",
   "metadata": {},
   "source": [
    "Method overriding is a feature in object-oriented programming that allows a subclass to provide a specific implementation of a method that is already defined in its superclass. When a method is overridden in the subclass, the method in the superclass is overridden by the new implementation in the subclass. This allows the subclass to modify the behavior of the inherited method according to its specific requirements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec091cb1-a8d4-43a7-bc46-be16608bcc27",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Animal:\n",
    "    def make_sound(self):\n",
    "        return \"Generic animal sound\"\n",
    "\n",
    "class Dog(Animal):\n",
    "    def make_sound(self):\n",
    "        return \"Woof!\"\n",
    "\n",
    "class Cat(Animal):\n",
    "    def make_sound(self):\n",
    "        return \"Meow!\"\n",
    "\n",
    "animal = Animal()\n",
    "dog = Dog()\n",
    "cat = Cat()\n",
    "\n",
    "print(animal.make_sound())\n",
    "print(dog.make_sound())\n",
    "print(cat.make_sound())\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
